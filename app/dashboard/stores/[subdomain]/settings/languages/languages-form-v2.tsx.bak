'use client';

import { useState, useEffect } from 'react';
import type { Store } from '@prisma/client';
import { 
  Globe, Languages, FileText, DollarSign,
  Plus, Edit, Trash2, Download,
  CheckCircle, XCircle, Upload, Search,
  Flag, Percent, Eye, FileDown,
  Save, X, Edit2
} from 'lucide-react';
import { SettingsPageLayout } from '@/components/dashboard/settings/SettingsPageLayout';
import { SettingsFormWrapper } from '@/components/dashboard/settings/SettingsFormWrapper';
import { toast } from 'sonner';
import { getCommerceTranslationKeys } from '@/lib/translations/commerce-theme-keys';

const tabs = [
  { id: 'primary' as const, label: 'Primary Language', icon: Globe },
  { id: 'additional' as const, label: 'Additional Languages', icon: Languages },
  { id: 'translations' as const, label: 'Translations', icon: FileText },
  { id: 'editor' as const, label: 'Translation Editor', icon: Edit2 },
  { id: 'currency' as const, label: 'Currency Format', icon: DollarSign }
];

// Remove this static data, we'll fetch it from API

export function LanguagesFormV2({ store }: { store: Store }) {
  const [activeTab, setActiveTab] = useState<'primary' | 'additional' | 'translations' | 'editor' | 'currency'>('primary');
  const [languageSettings, setLanguageSettings] = useState<any>(null);
  const [translations, setTranslations] = useState<any>({});
  const [availableLanguages, setAvailableLanguages] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [showAddLanguageModal, setShowAddLanguageModal] = useState(false);
  const [selectedLanguageToAdd, setSelectedLanguageToAdd] = useState('');
  const [importing, setImporting] = useState(false);
  const [exporting, setExporting] = useState(false);
  
  // Inline translation editor states
  const [showTranslationEditor, setShowTranslationEditor] = useState(false);
  const [selectedContentType, setSelectedContentType] = useState<'product' | 'category' | 'page' | 'blogPost'>('product');
  const [selectedContent, setSelectedContent] = useState<any>(null);
  const [contentList, setContentList] = useState<any[]>([]);
  const [loadingContent, setLoadingContent] = useState(false);
  const [savingTranslation, setSavingTranslation] = useState(false);
  const [sourceLanguage, setSourceLanguage] = useState('en');
  const [targetLanguage, setTargetLanguage] = useState('tr');
  const [contentTranslations, setContentTranslations] = useState<any>({});

  // Fetch language settings on mount
  useEffect(() => {
    fetchLanguageSettings();
  }, [store.subdomain]);

  const fetchLanguageSettings = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/stores/${store.subdomain}/languages`);
      if (response.ok) {
        const data = await response.json();
        setLanguageSettings(data.languageSettings || {
          enabledLanguages: ['en'],
          defaultLanguage: 'en',
          autoDetect: false,
          showLanguageSwitcher: true,
          translateUrls: false
        });
        setAvailableLanguages(data.availableLanguages || []);
      }
    } catch (error) {
      console.error('Error fetching language settings:', error);
      toast.error('Failed to load language settings');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveSettings = async () => {
    try {
      setSaving(true);
      const response = await fetch(`/api/stores/${store.subdomain}/languages`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(languageSettings),
      });
      
      if (response.ok) {
        toast.success('Language settings updated successfully');
      } else {
        throw new Error('Failed to save settings');
      }
    } catch (error) {
      console.error('Error saving language settings:', error);
      toast.error('Failed to save language settings');
    } finally {
      setSaving(false);
    }
  };

  const handleLanguageSettingChange = (key: string, value: any) => {
    setLanguageSettings((prev: any) => {
      const keys = key.split('.');
      const newSettings = { ...prev };
      let current = newSettings;
      
      for (let i = 0; i < keys.length - 1; i++) {
        if (!current[keys[i]]) {
          current[keys[i]] = {};
        }
        current = current[keys[i]];
      }
      
      current[keys[keys.length - 1]] = value;
      return newSettings;
    });
  };

  // For backward compatibility with form structure
  const formData = {
    primaryLanguage: {
      code: languageSettings?.defaultLanguage || 'en',
      name: availableLanguages.find(l => l.code === languageSettings?.defaultLanguage)?.name || 'English',
      region: 'US',
      direction: availableLanguages.find(l => l.code === languageSettings?.defaultLanguage)?.rtl ? 'rtl' : 'ltr'
    },
    additionalLanguages: languageSettings?.enabledLanguages
      ?.filter((code: string) => code !== languageSettings.defaultLanguage)
      .map((code: string, index: number) => {
        const lang = availableLanguages.find(l => l.code === code);
        return {
          id: index + 1,
          code: code,
          name: lang?.name || code,
          region: code.toUpperCase(),
          direction: lang?.rtl ? 'rtl' : 'ltr',
          enabled: true,
          progress: Math.floor(Math.random() * 100) // Mock progress for now
        };
      }) || [],
    translationSettings: {
      autoTranslate: languageSettings?.autoTranslate || false,
      translationService: 'google',
      requireApproval: true,
      fallbackToDefault: true
    },
    currencyFormat: {
      symbol: '$',
      code: 'USD',
      position: 'before',
      decimalPlaces: 2,
      thousandSeparator: ',',
      decimalSeparator: '.'
    }
  };

  const handleChange = (key: string, value: any) => {
    // Map form changes to language settings
    if (key.startsWith('primaryLanguage')) {
      const [code, region] = value.split('-');
      handleLanguageSettingChange('defaultLanguage', code);
    } else if (key === 'translationSettings.autoTranslate') {
      handleLanguageSettingChange('autoTranslate', value);
    }
  };

  const handleImportTranslations = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json,.csv';
    input.onchange = async (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (!file) return;

      setImporting(true);
      try {
        const text = await file.text();
        let translations;
        
        if (file.name.endsWith('.json')) {
          translations = JSON.parse(text);
        } else if (file.name.endsWith('.csv')) {
          // Simple CSV parser
          const lines = text.split('\n');
          const headers = lines[0].split(',');
          translations = {};
          
          for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split(',');
            if (values.length >= 4) {
              const [language, namespace, key, value] = values;
              if (!translations[language]) translations[language] = {};
              if (!translations[language][namespace]) translations[language][namespace] = {};
              translations[language][namespace][key] = value;
            }
          }
        }

        // Send to API
        const response = await fetch(`/api/stores/${store.subdomain}/languages?type=translations`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ translations: formatTranslationsForAPI(translations) })
        });

        if (response.ok) {
          toast.success('Translations imported successfully');
          setTranslations(translations);
        } else {
          throw new Error('Failed to import translations');
        }
      } catch (error) {
        console.error('Import error:', error);
        toast.error('Failed to import translations. Please check the file format.');
      } finally {
        setImporting(false);
      }
    };
    input.click();
  };

  const handleExportTranslations = async () => {
    setExporting(true);
    try {
      const response = await fetch(`/api/stores/${store.subdomain}/languages?type=translations`);
      
      console.log('Export response status:', response.status);
      console.log('Export response:', response);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Export error response:', errorText);
        throw new Error(`Failed to fetch translations: ${response.status} ${errorText}`);
      }
      
      const data = await response.json();
      const translations = data.translations || {};
      
      // Check if we should include theme template
      const includeThemeTemplate = Object.keys(translations).length === 0;
      
      // If no translations exist, create template with theme keys
      if (includeThemeTemplate) {
        // Get all theme translation keys
        const themeKeys = getCommerceTranslationKeys();
        const templateTranslations: any = {};
        
        // Create template for each enabled language
        languageSettings.enabledLanguages.forEach((langCode: string) => {
          templateTranslations[langCode] = {};
          
          // Group keys by namespace
          themeKeys.forEach(({ namespace, key, defaultValue }) => {
            if (!templateTranslations[langCode][namespace]) {
              templateTranslations[langCode][namespace] = {};
            }
            
            // For English, use default values
            if (langCode === 'en') {
              templateTranslations[langCode][namespace][key] = defaultValue;
            } else {
              // For other languages, add language prefix as placeholder
              templateTranslations[langCode][namespace][key] = `[${langCode.toUpperCase()}] ${defaultValue}`;
            }
          });
        });
        
        Object.assign(translations, templateTranslations);
      }
      
      // Convert to CSV format
      let csv = 'Language,Namespace,Key,Value\n';
      Object.entries(translations).forEach(([language, namespaces]: any) => {
        if (typeof namespaces === 'object' && namespaces !== null) {
          Object.entries(namespaces).forEach(([namespace, keys]: any) => {
            if (typeof keys === 'object' && keys !== null) {
              Object.entries(keys).forEach(([key, value]: any) => {
                // Escape quotes in values
                const escapedValue = String(value).replace(/"/g, '""');
                csv += `${language},${namespace},${key},"${escapedValue}"\n`;
              });
            }
          });
        }
      });
      
      // Download file
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `translations-${store.subdomain}-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast.success('Translations exported successfully');
    } catch (error) {
      console.error('Export error:', error);
      toast.error('Failed to export translations');
    } finally {
      setExporting(false);
    }
  };

  const formatTranslationsForAPI = (translations: any) => {
    const formatted: any[] = [];
    Object.entries(translations).forEach(([language, namespaces]: any) => {
      Object.entries(namespaces).forEach(([namespace, keys]: any) => {
        Object.entries(keys).forEach(([key, value]: any) => {
          formatted.push({ language, namespace, key, value });
        });
      });
    });
    return formatted;
  };

  const handleExportThemeTemplate = async () => {
    setExporting(true);
    try {
      // Get all theme translation keys
      const themeKeys = getCommerceTranslationKeys();
      
      // Create CSV with theme template
      let csv = 'Language,Namespace,Key,Value,Description\n';
      
      // Add keys for each enabled language
      languageSettings.enabledLanguages.forEach((langCode: string) => {
        themeKeys.forEach(({ namespace, key, defaultValue }) => {
          const value = langCode === 'en' ? defaultValue : '';
          const description = langCode === 'en' ? 'Default' : `Translate: ${defaultValue}`;
          csv += `${langCode},${namespace},${key},"${value}","${description}"\n`;
        });
      });
      
      // Download file
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `theme-translation-template-${store.subdomain}-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast.success('Theme translation template exported successfully');
    } catch (error) {
      console.error('Export error:', error);
      toast.error('Failed to export theme template');
    } finally {
      setExporting(false);
    }
  };

  // Load content for translation editor
  const loadContent = async () => {
    setLoadingContent(true);
    try {
      const endpoint = {
        product: '/api/stores/' + store.subdomain + '/products',
        category: '/api/stores/' + store.subdomain + '/categories',
        page: '/api/stores/' + store.subdomain + '/pages',
        blogPost: '/api/stores/' + store.subdomain + '/blogs'
      }[selectedContentType];

      const response = await fetch(endpoint);
      if (!response.ok) throw new Error('Failed to load content');
      
      const data = await response.json();
      setContentList(selectedContentType === 'blogPost' ? data.posts || [] : data);
    } catch (error) {
      console.error('Error loading content:', error);
      toast.error('Failed to load content');
    } finally {
      setLoadingContent(false);
    }
  };

  // Load translations for selected content
  const loadContentTranslations = async (contentId: string) => {
    try {
      const response = await fetch(`/api/stores/${store.subdomain}/content-translations?type=${selectedContentType}&contentId=${contentId}`);
      if (!response.ok) throw new Error('Failed to load translations');
      
      const data = await response.json();
      const translations: any = {};
      
      // Format translations by language
      if (data[selectedContentType + 's']) {
        const content = data[selectedContentType + 's'].find((item: any) => item.id === contentId);
        if (content?.translations) {
          content.translations.forEach((trans: any) => {
            translations[trans.language] = trans;
          });
        }
      }
      
      setContentTranslations(translations);
    } catch (error) {
      console.error('Error loading translations:', error);
      toast.error('Failed to load translations');
    }
  };

  // Save content translation
  const saveContentTranslation = async (field: string, value: string) => {
    setSavingTranslation(true);
    try {
      const translationData = {
        [field]: value
      };

      const response = await fetch(`/api/stores/${store.subdomain}/content-translations`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contentType: selectedContentType,
          contentId: selectedContent.id,
          language: targetLanguage,
          translations: translationData
        })
      });

      if (!response.ok) throw new Error('Failed to save translation');
      
      toast.success('Translation saved successfully');
      
      // Reload translations
      await loadContentTranslations(selectedContent.id);
    } catch (error) {
      console.error('Error saving translation:', error);
      toast.error('Failed to save translation');
    } finally {
      setSavingTranslation(false);
    }
  };

  if (loading) {
    return (
      <div className="nuvi-flex nuvi-items-center nuvi-justify-center nuvi-h-96">
        <div className="nuvi-animate-spin nuvi-rounded-full nuvi-h-12 nuvi-w-12 nuvi-border-t-2 nuvi-border-b-2 nuvi-border-primary"></div>
      </div>
    );
  }

  return (
        <SettingsPageLayout
          title="Languages"
          description="Configure store languages by market and region"
        >
          <div className="nuvi-space-y-lg">
            {/* Markets Overview */}
            <div className="nuvi-alert nuvi-alert-info">
              <Languages className="h-4 w-4" />
              <div>
                <h4 className="nuvi-font-medium">Market-Specific Language Settings</h4>
                <p className="nuvi-text-sm">
                  Language preferences vary by market and region. 
                  Configure your primary language below and add additional languages to serve different markets effectively.
                </p>
              </div>
            </div>
          </div>

      {/* Tabs */}
      <div className="nuvi-settings-tabs">
        <div className="nuvi-settings-tabs-list">
          {tabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`nuvi-settings-tab ${activeTab === tab.id ? 'active' : ''}`}
              >
                <Icon className="h-4 w-4" />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </div>
      </div>

      {/* Tab Content */}
      <div className="nuvi-tab-content">
        {activeTab === 'primary' && (
          <div className="nuvi-space-y-lg">
            {/* Primary Language Selection */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Primary Language</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  Set the default language for your store
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-space-y-md">
                  <div className="nuvi-grid nuvi-grid-cols-1 nuvi-md:grid-cols-2 nuvi-gap-md">
                    <div>
                      <label className="nuvi-label">Language</label>
                      <select 
                        className="nuvi-select"
                        value={`${formData.primaryLanguage.code}-${formData.primaryLanguage.region}`}
                        onChange={(e) => {
                          const [code, region] = e.target.value.split('-');
                          const languageNames: { [key: string]: string } = {
                            'en': 'English',
                            'es': 'Spanish',
                            'fr': 'French',
                            'de': 'German',
                            'it': 'Italian',
                            'pt': 'Portuguese',
                            'ru': 'Russian',
                            'zh': 'Chinese',
                            'ja': 'Japanese',
                            'ko': 'Korean'
                          };
                          handleChange('primaryLanguage', {
                            code,
                            region,
                            name: languageNames[code] || code,
                            direction: ['ar', 'he', 'fa'].includes(code) ? 'rtl' : 'ltr'
                          });
                        }}
                      >
                        <option value="en-US">English (United States)</option>
                        <option value="en-GB">English (United Kingdom)</option>
                        <option value="es-ES">Spanish (Spain)</option>
                        <option value="es-MX">Spanish (Mexico)</option>
                        <option value="fr-FR">French (France)</option>
                        <option value="fr-CA">French (Canada)</option>
                        <option value="de-DE">German (Germany)</option>
                        <option value="it-IT">Italian (Italy)</option>
                        <option value="pt-BR">Portuguese (Brazil)</option>
                        <option value="pt-PT">Portuguese (Portugal)</option>
                        <option value="ru-RU">Russian (Russia)</option>
                        <option value="zh-CN">Chinese (Simplified)</option>
                        <option value="zh-TW">Chinese (Traditional)</option>
                        <option value="ja-JP">Japanese (Japan)</option>
                        <option value="ko-KR">Korean (South Korea)</option>
                      </select>
                    </div>
                    <div>
                      <label className="nuvi-label">Text direction</label>
                      <select 
                        className="nuvi-select"
                        value={formData.primaryLanguage.direction}
                        onChange={(e) => handleChange('primaryLanguage.direction', e.target.value)}
                      >
                        <option value="ltr">Left to Right (LTR)</option>
                        <option value="rtl">Right to Left (RTL)</option>
                      </select>
                    </div>
                  </div>

                  <div className="nuvi-p-md nuvi-border nuvi-rounded-lg nuvi-bg-blue-50">
                    <div className="nuvi-flex nuvi-items-center nuvi-gap-sm nuvi-mb-sm">
                      <Flag className="h-4 w-4 nuvi-text-blue-600" />
                      <h4 className="nuvi-font-medium nuvi-text-blue-900">Current Selection</h4>
                    </div>
                    <p className="nuvi-text-sm nuvi-text-blue-800">
                      <strong>{formData.primaryLanguage.name}</strong> ({formData.primaryLanguage.code}-{formData.primaryLanguage.region})
                      <br />
                      Text direction: {formData.primaryLanguage.direction.toUpperCase()}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Language Settings */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Language Settings</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  Configure how languages work in your store
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-space-y-md">
                  <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <div>
                      <h4 className="nuvi-font-medium">Show language selector</h4>
                      <p className="nuvi-text-sm nuvi-text-muted">
                        Display language selector in your store header
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" defaultChecked className="sr-only peer" />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[var(--nuvi-primary-light)] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--nuvi-primary)]"></div>
                    </label>
                  </div>

                  <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <div>
                      <h4 className="nuvi-font-medium">Auto-detect customer language</h4>
                      <p className="nuvi-text-sm nuvi-text-muted">
                        Automatically show content in customer's browser language
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[var(--nuvi-primary-light)] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--nuvi-primary)]"></div>
                    </label>
                  </div>

                  <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <div>
                      <h4 className="nuvi-font-medium">Remember customer's choice</h4>
                      <p className="nuvi-text-sm nuvi-text-muted">
                        Save customer's language preference in cookies
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" defaultChecked className="sr-only peer" />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[var(--nuvi-primary-light)] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--nuvi-primary)]"></div>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'additional' && (
          <div className="nuvi-space-y-lg">
            {/* Additional Languages */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <div className="nuvi-flex nuvi-items-center nuvi-justify-between">
                  <div>
                    <h3 className="nuvi-card-title">Additional Languages</h3>
                    <p className="nuvi-text-sm nuvi-text-muted">
                      Add and manage additional languages for your store
                    </p>
                  </div>
                  <button 
                    className="nuvi-btn nuvi-btn-primary nuvi-btn-sm"
                    onClick={() => setShowAddLanguageModal(true)}
                  >
                    <Plus className="h-4 w-4" />
                    Add Language
                  </button>
                </div>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-space-y-md">
                  {formData.additionalLanguages.map((language) => (
                    <div key={language.id} className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                      <div className="nuvi-flex nuvi-items-center nuvi-gap-md">
                        <Flag className="h-5 w-5 nuvi-text-muted" />
                        <div>
                          <h4 className="nuvi-font-medium">{language.name}</h4>
                          <p className="nuvi-text-sm nuvi-text-muted">
                            {language.code}-{language.region} • {language.direction.toUpperCase()}
                          </p>
                        </div>
                        <div className="nuvi-flex nuvi-items-center nuvi-gap-sm">
                          <div className="nuvi-w-24 nuvi-h-2 nuvi-bg-gray-200 nuvi-rounded-full">
                            <div 
                              className="nuvi-h-2 nuvi-bg-primary nuvi-rounded-full"
                              style={{ width: `${language.progress}%` }}
                            ></div>
                          </div>
                          <span className="nuvi-text-sm nuvi-text-muted">{language.progress}%</span>
                        </div>
                      </div>
                      <div className="nuvi-flex nuvi-items-center nuvi-gap-md">
                        <span className={`nuvi-badge ${
                          language.enabled ? 'nuvi-badge-success' : 'nuvi-badge-secondary'
                        }`}>
                          {language.enabled ? 'Enabled' : 'Disabled'}
                        </span>
                        <div className="nuvi-flex nuvi-gap-sm">
                          <button 
                            className="nuvi-btn nuvi-btn-ghost nuvi-btn-sm"
                            onClick={() => {
                              const newEnabledLanguages = language.enabled 
                                ? languageSettings.enabledLanguages.filter((code: string) => code !== language.code)
                                : [...languageSettings.enabledLanguages, language.code];
                              handleLanguageSettingChange('enabledLanguages', newEnabledLanguages);
                            }}
                          >
                            {language.enabled ? <XCircle className="h-4 w-4" /> : <CheckCircle className="h-4 w-4" />}
                          </button>
                          <button 
                            className="nuvi-btn nuvi-btn-ghost nuvi-btn-sm"
                            onClick={() => toast.info('Translation preview coming soon')}
                          >
                            <Eye className="h-4 w-4" />
                          </button>
                          <button 
                            className="nuvi-btn nuvi-btn-ghost nuvi-btn-sm nuvi-text-red-600"
                            onClick={() => {
                              if (language.code === languageSettings.defaultLanguage) {
                                toast.error('Cannot remove default language');
                                return;
                              }
                              const newEnabledLanguages = languageSettings.enabledLanguages.filter(
                                (code: string) => code !== language.code
                              );
                              handleLanguageSettingChange('enabledLanguages', newEnabledLanguages);
                              toast.success(`${language.name} removed`);
                            }}
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Language Management */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Language Management</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  Bulk actions and language management tools
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-grid nuvi-grid-cols-1 nuvi-sm:grid-cols-2 nuvi-gap-sm">
                  <button 
                    className="nuvi-btn nuvi-btn-secondary"
                    onClick={handleImportTranslations}
                    disabled={importing}
                  >
                    <Upload className="h-4 w-4" />
                    {importing ? 'Importing...' : 'Import Translations'}
                  </button>
                  <button 
                    className="nuvi-btn nuvi-btn-secondary"
                    onClick={handleExportTranslations}
                    disabled={exporting}
                  >
                    <Download className="h-4 w-4" />
                    {exporting ? 'Exporting...' : 'Export Theme Translations'}
                  </button>
                  <button 
                    className="nuvi-btn nuvi-btn-secondary"
                    onClick={handleExportThemeTemplate}
                    disabled={exporting}
                    title="Export empty template with all theme translation keys"
                  >
                    <FileDown className="h-4 w-4" />
                    Export Theme Template
                  </button>
                  <button 
                    className="nuvi-btn nuvi-btn-secondary"
                    onClick={async () => {
                      setExporting(true);
                      try {
                        const response = await fetch(`/api/stores/${store.subdomain}/content-translations/export`);
                        if (!response.ok) throw new Error('Export failed');
                        
                        const blob = await response.blob();
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `content-translations-${store.subdomain}-${new Date().toISOString().split('T')[0]}.csv`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                        
                        toast.success('Content translations exported successfully');
                      } catch (error) {
                        console.error('Export error:', error);
                        toast.error('Failed to export content translations');
                      } finally {
                        setExporting(false);
                      }
                    }}
                    disabled={exporting}
                    title="Export product, category, page and blog translations"
                  >
                    <FileDown className="h-4 w-4" />
                    Export Content Translations
                  </button>
                  <button 
                    className="nuvi-btn nuvi-btn-secondary"
                    onClick={async () => {
                      const allLanguageCodes = availableLanguages.map(lang => lang.code);
                      handleLanguageSettingChange('enabledLanguages', allLanguageCodes);
                      await handleSaveSettings();
                      toast.success('All languages enabled');
                    }}
                  >
                    <CheckCircle className="h-4 w-4" />
                    Enable All
                  </button>
                  <button 
                    className="nuvi-btn nuvi-btn-secondary"
                    onClick={async () => {
                      handleLanguageSettingChange('enabledLanguages', [languageSettings.defaultLanguage]);
                      await handleSaveSettings();
                      toast.success('All additional languages disabled');
                    }}
                  >
                    <XCircle className="h-4 w-4" />
                    Disable All
                  </button>
                </div>
              </div>
            </div>

            {/* Translation Progress */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Translation Progress</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  Overview of translation completion for each language
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-grid nuvi-grid-cols-1 nuvi-md:grid-cols-2 nuvi-gap-md">
                  {formData.additionalLanguages.map((language) => (
                    <div key={language.id} className="nuvi-p-md nuvi-border nuvi-rounded-lg">
                      <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-mb-sm">
                        <h4 className="nuvi-font-medium">{language.name}</h4>
                        <span className="nuvi-text-sm nuvi-font-medium">{language.progress}%</span>
                      </div>
                      <div className="nuvi-w-full nuvi-h-2 nuvi-bg-gray-200 nuvi-rounded-full nuvi-mb-sm">
                        <div 
                          className={`nuvi-h-2 nuvi-rounded-full ${
                            language.progress >= 80 ? 'nuvi-bg-green-500' :
                            language.progress >= 50 ? 'nuvi-bg-yellow-500' :
                            'nuvi-bg-red-500'
                          }`}
                          style={{ width: `${language.progress}%` }}
                        ></div>
                      </div>
                      <p className="nuvi-text-xs nuvi-text-muted">
                        {language.progress >= 80 ? 'Ready for use' :
                         language.progress >= 50 ? 'Partially translated' :
                         'Translation needed'}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Add Language Modal */}
            {showAddLanguageModal && (
              <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[100]" style={{ position: 'fixed' }}>
                <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md mx-4">
                  <h3 className="text-lg font-semibold mb-4">Add Language</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Select a language to add
                      </label>
                      <select 
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary dark:bg-gray-700 dark:border-gray-600"
                        value={selectedLanguageToAdd}
                        onChange={(e) => setSelectedLanguageToAdd(e.target.value)}
                      >
                        <option value="">Choose a language...</option>
                        {availableLanguages
                          .filter(lang => !languageSettings.enabledLanguages.includes(lang.code))
                          .map(lang => (
                            <option key={lang.code} value={lang.code}>
                              {lang.name} ({lang.nativeName})
                            </option>
                          ))}
                      </select>
                    </div>
                    <div className="flex gap-3 justify-end pt-4">
                      <button 
                        className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                        onClick={() => {
                          setShowAddLanguageModal(false);
                          setSelectedLanguageToAdd('');
                        }}
                      >
                        Cancel
                      </button>
                      <button 
                        className="px-4 py-2 text-sm font-medium text-white bg-primary hover:bg-primary-dark rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        onClick={() => {
                          if (selectedLanguageToAdd) {
                            const newEnabledLanguages = [...languageSettings.enabledLanguages, selectedLanguageToAdd];
                            handleLanguageSettingChange('enabledLanguages', newEnabledLanguages);
                            const langName = availableLanguages.find(l => l.code === selectedLanguageToAdd)?.name;
                            toast.success(`${langName} added successfully`);
                            setShowAddLanguageModal(false);
                            setSelectedLanguageToAdd('');
                          }
                        }}
                        disabled={!selectedLanguageToAdd}
                      >
                        Add Language
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'translations' && (
          <div className="nuvi-space-y-lg">
            {/* Content Translations */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Content Translations</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  Translate your products, categories, pages, and blog posts
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-space-y-md">
                  <div className="nuvi-p-md nuvi-border nuvi-rounded-lg nuvi-bg-blue-50">
                    <h4 className="nuvi-font-medium nuvi-text-blue-900 nuvi-mb-sm">
                      How Content Translation Works
                    </h4>
                    <ol className="nuvi-text-sm nuvi-text-blue-800 nuvi-space-y-xs nuvi-list-decimal nuvi-list-inside">
                      <li>Export your content using the button below</li>
                      <li>Fill in translations in the CSV file</li>
                      <li>Import the completed CSV back</li>
                      <li>Content will display in customer's selected language</li>
                    </ol>
                  </div>
                  
                  <div className="nuvi-grid nuvi-grid-cols-1 nuvi-md:grid-cols-3 nuvi-gap-md">
                    <div className="nuvi-text-center nuvi-p-md nuvi-border nuvi-rounded-lg">
                      <div className="nuvi-text-2xl nuvi-font-bold nuvi-text-primary">
                        {/* This would need actual data from API */}
                        0
                      </div>
                      <div className="nuvi-text-sm nuvi-text-muted">Products to translate</div>
                    </div>
                    <div className="nuvi-text-center nuvi-p-md nuvi-border nuvi-rounded-lg">
                      <div className="nuvi-text-2xl nuvi-font-bold nuvi-text-primary">
                        0
                      </div>
                      <div className="nuvi-text-sm nuvi-text-muted">Categories to translate</div>
                    </div>
                    <div className="nuvi-text-center nuvi-p-md nuvi-border nuvi-rounded-lg">
                      <div className="nuvi-text-2xl nuvi-font-bold nuvi-text-primary">
                        0
                      </div>
                      <div className="nuvi-text-sm nuvi-text-muted">Pages to translate</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

                            onClick={() => {
                              setSelectedContent(item);
                              loadContentTranslations(item.id);
                            }}
                            className={`w-full text-left p-3 rounded-lg border transition-colors ${
                              selectedContent?.id === item.id
                                ? 'bg-primary/10 border-primary'
                                : 'hover:bg-gray-50 dark:hover:bg-gray-700 border-gray-200'
                            }`}
                          >
                            <div className="font-medium">{item.name || item.title}</div>
                            {item.slug && (
                              <div className="text-sm text-gray-500 mt-1">/{item.slug}</div>
                            )}
                          </button>
                        ))}
                      </div>
                    </div>

                    {/* Translation Fields */}
                    <div className="flex-1 overflow-y-auto p-6">
                      {selectedContent ? (
                        <div className="space-y-6">
                          {/* Title/Name Field */}
                          <div className="space-y-2">
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                              {selectedContentType === 'product' || selectedContentType === 'category' ? 'Name' : 'Title'}
                            </label>
                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <div className="text-xs text-gray-500 mb-1">{sourceLanguage.toUpperCase()}</div>
                                <input
                                  type="text"
                                  value={selectedContent.name || selectedContent.title}
                                  readOnly
                                  className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50"
                                />
                              </div>
                              <div>
                                <div className="text-xs text-gray-500 mb-1">{targetLanguage.toUpperCase()}</div>
                                <div className="flex gap-2">
                                  <input
                                    type="text"
                                    value={contentTranslations[targetLanguage]?.name || contentTranslations[targetLanguage]?.title || ''}
                                    onChange={(e) => {
                                      setContentTranslations({
                                        ...contentTranslations,
                                        [targetLanguage]: {
                                          ...contentTranslations[targetLanguage],
                                          [selectedContentType === 'product' || selectedContentType === 'category' ? 'name' : 'title']: e.target.value
                                        }
                                      });
                                    }}
                                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                                    placeholder="Enter translation..."
                                  />
                                  <button
                                    onClick={() => saveContentTranslation(
                                      selectedContentType === 'product' || selectedContentType === 'category' ? 'name' : 'title',
                                      contentTranslations[targetLanguage]?.[selectedContentType === 'product' || selectedContentType === 'category' ? 'name' : 'title'] || ''
                                    )}
                                    disabled={savingTranslation}
                                    className="px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
                                  >
                                    <Save className="h-4 w-4" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Description/Content Field */}
                          {(selectedContent.description || selectedContent.content) && (
                            <div className="space-y-2">
                              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                {selectedContentType === 'page' || selectedContentType === 'blogPost' ? 'Content' : 'Description'}
                              </label>
                              <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <div className="text-xs text-gray-500 mb-1">{sourceLanguage.toUpperCase()}</div>
                                  <textarea
                                    value={selectedContent.description || selectedContent.content}
                                    readOnly
                                    rows={6}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50"
                                  />
                                </div>
                                <div>
                                  <div className="text-xs text-gray-500 mb-1">{targetLanguage.toUpperCase()}</div>
                                  <div className="flex gap-2">
                                    <textarea
                                      value={contentTranslations[targetLanguage]?.description || contentTranslations[targetLanguage]?.content || ''}
                                      onChange={(e) => {
                                        setContentTranslations({
                                          ...contentTranslations,
                                          [targetLanguage]: {
                                            ...contentTranslations[targetLanguage],
                                            [selectedContentType === 'page' || selectedContentType === 'blogPost' ? 'content' : 'description']: e.target.value
                                          }
                                        });
                                      }}
                                      rows={6}
                                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                                      placeholder="Enter translation..."
                                    />
                                    <button
                                      onClick={() => saveContentTranslation(
                                        selectedContentType === 'page' || selectedContentType === 'blogPost' ? 'content' : 'description',
                                        contentTranslations[targetLanguage]?.[selectedContentType === 'page' || selectedContentType === 'blogPost' ? 'content' : 'description'] || ''
                                      )}
                                      disabled={savingTranslation}
                                      className="px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
                                    >
                                      <Save className="h-4 w-4" />
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          )}

                          {/* SEO Fields */}
                          {(selectedContent.metaTitle || selectedContent.seoTitle) && (
                            <>
                              <div className="space-y-2">
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                  SEO Title
                                </label>
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <div className="text-xs text-gray-500 mb-1">{sourceLanguage.toUpperCase()}</div>
                                    <input
                                      type="text"
                                      value={selectedContent.metaTitle || selectedContent.seoTitle || ''}
                                      readOnly
                                      className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50"
                                    />
                                  </div>
                                  <div>
                                    <div className="text-xs text-gray-500 mb-1">{targetLanguage.toUpperCase()}</div>
                                    <div className="flex gap-2">
                                      <input
                                        type="text"
                                        value={contentTranslations[targetLanguage]?.metaTitle || contentTranslations[targetLanguage]?.seoTitle || ''}
                                        onChange={(e) => {
                                          setContentTranslations({
                                            ...contentTranslations,
                                            [targetLanguage]: {
                                              ...contentTranslations[targetLanguage],
                                              [selectedContentType === 'product' ? 'metaTitle' : 'seoTitle']: e.target.value
                                            }
                                          });
                                        }}
                                        className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                                        placeholder="Enter translation..."
                                      />
                                      <button
                                        onClick={() => saveContentTranslation(
                                          selectedContentType === 'product' ? 'metaTitle' : 'seoTitle',
                                          contentTranslations[targetLanguage]?.[selectedContentType === 'product' ? 'metaTitle' : 'seoTitle'] || ''
                                        )}
                                        disabled={savingTranslation}
                                        className="px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
                                      >
                                        <Save className="h-4 w-4" />
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>

                              <div className="space-y-2">
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                  SEO Description
                                </label>
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <div className="text-xs text-gray-500 mb-1">{sourceLanguage.toUpperCase()}</div>
                                    <textarea
                                      value={selectedContent.metaDescription || selectedContent.seoDescription || ''}
                                      readOnly
                                      rows={3}
                                      className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50"
                                    />
                                  </div>
                                  <div>
                                    <div className="text-xs text-gray-500 mb-1">{targetLanguage.toUpperCase()}</div>
                                    <div className="flex gap-2">
                                      <textarea
                                        value={contentTranslations[targetLanguage]?.metaDescription || contentTranslations[targetLanguage]?.seoDescription || ''}
                                        onChange={(e) => {
                                          setContentTranslations({
                                            ...contentTranslations,
                                            [targetLanguage]: {
                                              ...contentTranslations[targetLanguage],
                                              [selectedContentType === 'product' ? 'metaDescription' : 'seoDescription']: e.target.value
                                            }
                                          });
                                        }}
                                        rows={3}
                                        className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                                        placeholder="Enter translation..."
                                      />
                                      <button
                                        onClick={() => saveContentTranslation(
                                          selectedContentType === 'product' ? 'metaDescription' : 'seoDescription',
                                          contentTranslations[targetLanguage]?.[selectedContentType === 'product' ? 'metaDescription' : 'seoDescription'] || ''
                                        )}
                                        disabled={savingTranslation}
                                        className="px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
                                      >
                                        <Save className="h-4 w-4" />
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </>
                          )}
                        </div>
                      ) : (
                        <div className="text-center text-gray-500 mt-20">
                          Select a {selectedContentType} to translate
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Theme Translation Settings */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Theme Translation Settings</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  Configure how translations are handled in your store theme
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-space-y-md">
                  <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <div>
                      <h4 className="nuvi-font-medium">Automatic translation</h4>
                      <p className="nuvi-text-sm nuvi-text-muted">
                        Automatically translate content using AI services
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        checked={formData.translationSettings.autoTranslate}
                        onChange={(e) => handleChange('translationSettings.autoTranslate', e.target.checked)}
                        className="sr-only peer" 
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[var(--nuvi-primary-light)] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--nuvi-primary)]"></div>
                    </label>
                  </div>

                  <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <div>
                      <h4 className="nuvi-font-medium">Require approval</h4>
                      <p className="nuvi-text-sm nuvi-text-muted">
                        All translations must be approved before going live
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        checked={formData.translationSettings.requireApproval}
                        onChange={(e) => handleChange('translationSettings.requireApproval', e.target.checked)}
                        className="sr-only peer" 
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[var(--nuvi-primary-light)] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--nuvi-primary)]"></div>
                    </label>
                  </div>

                  <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <div>
                      <h4 className="nuvi-font-medium">Fallback to default language</h4>
                      <p className="nuvi-text-sm nuvi-text-muted">
                        Show default language content when translation is missing
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        checked={formData.translationSettings.fallbackToDefault}
                        onChange={(e) => handleChange('translationSettings.fallbackToDefault', e.target.checked)}
                        className="sr-only peer" 
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[var(--nuvi-primary-light)] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--nuvi-primary)]"></div>
                    </label>
                  </div>

                </div>
              </div>
            </div>

            {/* Translation Management */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <div className="nuvi-flex nuvi-items-center nuvi-justify-between">
                  <div>
                    <h3 className="nuvi-card-title">Translation Management</h3>
                    <p className="nuvi-text-sm nuvi-text-muted">
                      Manage and edit translations for your content
                    </p>
                  </div>
                  <div className="nuvi-flex nuvi-gap-sm">
                    <div className="nuvi-flex nuvi-items-center nuvi-gap-sm">
                      <Search className="h-4 w-4 nuvi-text-muted" />
                      <input
                        type="text"
                        placeholder="Search translations..."
                        className="nuvi-input nuvi-input-sm"
                      />
                    </div>
                    <select className="nuvi-select nuvi-select-sm">
                      <option value="all">All Languages</option>
                      <option value="es">Spanish</option>
                      <option value="fr">French</option>
                      <option value="de">German</option>
                    </select>
                  </div>
                </div>
              </div>
              <div className="nuvi-card-content">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left text-sm font-medium text-gray-700 pb-3">Key</th>
                        <th className="text-left text-sm font-medium text-gray-700 pb-3">Default (English)</th>
                        <th className="text-left text-sm font-medium text-gray-700 pb-3">Spanish</th>
                        <th className="text-left text-sm font-medium text-gray-700 pb-3">Status</th>
                        <th className="text-left text-sm font-medium text-gray-700 pb-3">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr className="border-b">
                        <td className="py-3">
                          <span className="nuvi-font-medium">common.add_to_cart</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-text-sm">Add to Cart</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-text-sm">Añadir al Carrito</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-badge nuvi-badge-success">Translated</span>
                        </td>
                        <td className="py-3">
                          <button className="nuvi-btn nuvi-btn-ghost nuvi-btn-sm">
                            <Edit className="h-4 w-4" />
                          </button>
                        </td>
                      </tr>
                      <tr className="border-b">
                        <td className="py-3">
                          <span className="nuvi-font-medium">common.checkout</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-text-sm">Checkout</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-text-sm nuvi-text-red-600">Missing</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-badge nuvi-badge-warning">Pending</span>
                        </td>
                        <td className="py-3">
                          <button className="nuvi-btn nuvi-btn-ghost nuvi-btn-sm">
                            <Edit className="h-4 w-4" />
                          </button>
                        </td>
                      </tr>
                      <tr className="border-b">
                        <td className="py-3">
                          <span className="nuvi-font-medium">product.price</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-text-sm">Price</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-text-sm">Precio</span>
                        </td>
                        <td className="py-3">
                          <span className="nuvi-badge nuvi-badge-success">Translated</span>
                        </td>
                        <td className="py-3">
                          <button className="nuvi-btn nuvi-btn-ghost nuvi-btn-sm">
                            <Edit className="h-4 w-4" />
                          </button>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'currency' && (
          <div className="nuvi-space-y-lg">
            {/* Currency Settings */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Currency Format</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  Configure how currency is displayed in your store
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-space-y-md">
                  <div className="nuvi-grid nuvi-grid-cols-1 nuvi-md:grid-cols-2 nuvi-gap-md">
                    <div>
                      <label className="nuvi-label">Currency</label>
                      <select 
                        className="nuvi-select"
                        value={formData.currencyFormat.code}
                        onChange={(e) => {
                          const currencyData: { [key: string]: { symbol: string; name: string } } = {
                            'USD': { symbol: '$', name: 'US Dollar' },
                            'EUR': { symbol: '€', name: 'Euro' },
                            'GBP': { symbol: '£', name: 'British Pound' },
                            'JPY': { symbol: '¥', name: 'Japanese Yen' },
                            'CAD': { symbol: 'C$', name: 'Canadian Dollar' },
                            'AUD': { symbol: 'A$', name: 'Australian Dollar' },
                            'CHF': { symbol: 'CHF', name: 'Swiss Franc' },
                            'CNY': { symbol: '¥', name: 'Chinese Yuan' }
                          };
                          const selected = currencyData[e.target.value];
                          handleChange('currencyFormat.code', e.target.value);
                          handleChange('currencyFormat.symbol', selected?.symbol || e.target.value);
                        }}
                      >
                        <option value="USD">USD - US Dollar ($)</option>
                        <option value="EUR">EUR - Euro (€)</option>
                        <option value="GBP">GBP - British Pound (£)</option>
                        <option value="JPY">JPY - Japanese Yen (¥)</option>
                        <option value="CAD">CAD - Canadian Dollar (C$)</option>
                        <option value="AUD">AUD - Australian Dollar (A$)</option>
                        <option value="CHF">CHF - Swiss Franc (CHF)</option>
                        <option value="CNY">CNY - Chinese Yuan (¥)</option>
                      </select>
                    </div>
                    <div>
                      <label className="nuvi-label">Symbol position</label>
                      <select 
                        className="nuvi-select"
                        value={formData.currencyFormat.position}
                        onChange={(e) => handleChange('currencyFormat.position', e.target.value)}
                      >
                        <option value="before">Before amount ($100)</option>
                        <option value="after">After amount (100$)</option>
                        <option value="before-space">Before with space ($ 100)</option>
                        <option value="after-space">After with space (100 $)</option>
                      </select>
                    </div>
                  </div>

                  <div className="nuvi-grid nuvi-grid-cols-1 nuvi-md:grid-cols-3 nuvi-gap-md">
                    <div>
                      <label className="nuvi-label">Decimal places</label>
                      <select 
                        className="nuvi-select"
                        value={formData.currencyFormat.decimalPlaces}
                        onChange={(e) => handleChange('currencyFormat.decimalPlaces', parseInt(e.target.value))}
                      >
                        <option value="0">0 (100)</option>
                        <option value="1">1 (100.0)</option>
                        <option value="2">2 (100.00)</option>
                        <option value="3">3 (100.000)</option>
                      </select>
                    </div>
                    <div>
                      <label className="nuvi-label">Thousand separator</label>
                      <select 
                        className="nuvi-select"
                        value={formData.currencyFormat.thousandSeparator}
                        onChange={(e) => handleChange('currencyFormat.thousandSeparator', e.target.value)}
                      >
                        <option value=",">Comma (1,000)</option>
                        <option value=".">Period (1.000)</option>
                        <option value=" ">Space (1 000)</option>
                        <option value="">None (1000)</option>
                      </select>
                    </div>
                    <div>
                      <label className="nuvi-label">Decimal separator</label>
                      <select 
                        className="nuvi-select"
                        value={formData.currencyFormat.decimalSeparator}
                        onChange={(e) => handleChange('currencyFormat.decimalSeparator', e.target.value)}
                      >
                        <option value=".">Period (100.50)</option>
                        <option value=",">Comma (100,50)</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Preview */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Preview</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  See how currency will be displayed in your store
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-grid nuvi-grid-cols-1 nuvi-md:grid-cols-2 nuvi-gap-md">
                  <div className="nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <h4 className="nuvi-font-medium nuvi-mb-sm">Sample Prices</h4>
                    <div className="nuvi-space-y-sm">
                      {[9.99, 129.95, 1234.56, 10000].map((price) => {
                        const formatPrice = (amount: number) => {
                          const { symbol, position, decimalPlaces, thousandSeparator, decimalSeparator } = formData.currencyFormat;
                          
                          let formattedAmount = amount.toFixed(decimalPlaces);
                          
                          if (decimalSeparator !== '.') {
                            formattedAmount = formattedAmount.replace('.', decimalSeparator);
                          }
                          
                          if (thousandSeparator) {
                            const parts = formattedAmount.split(decimalSeparator);
                            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
                            formattedAmount = parts.join(decimalSeparator);
                          }
                          
                          switch (position) {
                            case 'before':
                              return `${symbol}${formattedAmount}`;
                            case 'after':
                              return `${formattedAmount}${symbol}`;
                            case 'before-space':
                              return `${symbol} ${formattedAmount}`;
                            case 'after-space':
                              return `${formattedAmount} ${symbol}`;
                            default:
                              return `${symbol}${formattedAmount}`;
                          }
                        };
                        
                        return (
                          <div key={price} className="nuvi-flex nuvi-justify-between">
                            <span className="nuvi-text-sm nuvi-text-muted">{price}</span>
                            <span className="nuvi-font-medium">{formatPrice(price)}</span>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                  <div className="nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <h4 className="nuvi-font-medium nuvi-mb-sm">Current Format</h4>
                    <div className="nuvi-space-y-sm">
                      <div className="nuvi-flex nuvi-justify-between">
                        <span className="nuvi-text-sm nuvi-text-muted">Currency:</span>
                        <span className="nuvi-font-medium">{formData.currencyFormat.code}</span>
                      </div>
                      <div className="nuvi-flex nuvi-justify-between">
                        <span className="nuvi-text-sm nuvi-text-muted">Symbol:</span>
                        <span className="nuvi-font-medium">{formData.currencyFormat.symbol}</span>
                      </div>
                      <div className="nuvi-flex nuvi-justify-between">
                        <span className="nuvi-text-sm nuvi-text-muted">Position:</span>
                        <span className="nuvi-font-medium">{formData.currencyFormat.position}</span>
                      </div>
                      <div className="nuvi-flex nuvi-justify-between">
                        <span className="nuvi-text-sm nuvi-text-muted">Decimals:</span>
                        <span className="nuvi-font-medium">{formData.currencyFormat.decimalPlaces}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Multi-Currency Settings */}
            <div className="nuvi-card">
              <div className="nuvi-card-header">
                <h3 className="nuvi-card-title">Multi-Currency Settings</h3>
                <p className="nuvi-text-sm nuvi-text-muted">
                  Configure support for multiple currencies
                </p>
              </div>
              <div className="nuvi-card-content">
                <div className="nuvi-space-y-md">
                  <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <div>
                      <h4 className="nuvi-font-medium">Enable multi-currency</h4>
                      <p className="nuvi-text-sm nuvi-text-muted">
                        Allow customers to view prices in different currencies
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[var(--nuvi-primary-light)] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--nuvi-primary)]"></div>
                    </label>
                  </div>

                  <div className="nuvi-flex nuvi-items-center nuvi-justify-between nuvi-p-md nuvi-border nuvi-rounded-lg">
                    <div>
                      <h4 className="nuvi-font-medium">Auto-detect currency</h4>
                      <p className="nuvi-text-sm nuvi-text-muted">
                        Automatically show prices in customer's local currency
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[var(--nuvi-primary-light)] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--nuvi-primary)]"></div>
                    </label>
                  </div>

                  <div>
                    <label className="nuvi-label">Exchange rate provider</label>
                    <select className="nuvi-select">
                      <option value="auto">Automatic (Recommended)</option>
                      <option value="manual">Manual entry</option>
                      <option value="ecb">European Central Bank</option>
                      <option value="fixer">Fixer.io</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

          {/* Save Button */}
          <div className="nuvi-flex nuvi-justify-end nuvi-mt-lg">
            <button
              onClick={handleSaveSettings}
              disabled={saving}
              className="nuvi-btn nuvi-btn-primary"
            >
              {saving ? 'Saving...' : 'Save Changes'}
            </button>
          </div>
        </SettingsPageLayout>
  );
}